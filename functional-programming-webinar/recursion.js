'use strict';
/*
  В функциональных языках программирования нет циклов, поэтому задачи решаются при помощи более мощного инструмента - рекурсии.
  Всё, что решено при помощи циклов, можно решить при помощи рекурсии, но не всё, что реализовано рекурсией, можно решить при помощи циклов.
 */

// простой пример рекурсии, который можно решить и циклом
const countDownFrom = (n) => {
  if (n === 0) {
    return;
  }

  console.log(n);

  countDownFrom(n - 1);
};

countDownFrom(10); // 10, 9, 8, 7, 6, 5, 4, 3, 2, 1

/*
  Но если нам, например, нужно посчитаь комментарии к посту, а к каждому комментарию есть вложенные комментарии,
  и так может быть до бесконечности, то рекурсия может оказаться единственным способом решения задачи.

  Что мы должны сделать? Посчитать все комментарии первого уровня, затем проверить, есть к каждому из них комментарии,
  посчитать их, снова проверить, есть ли к каждому из этих комментариев комментарии, посчитать и так далее.
  Затем вернуться к самому первому вызову в стеке и вернуть полученное количество комментариев.

  Нам поможет рекурсия и reduce.
 */

const commentsTree = [
  {
    id: 1,
    text: 'Recursion is fun!',
    comments: [
      {
        id: 2,
        text: 'Yes, indeed!',
        comments: [
          {
            id: 3,
            text: 'Yaaazzz! I agree with you guys',
            comments: [
              {
                id: 11,
                text: '😁',
              },
              {
                id: 13,
                text: '😂',
              },
            ]
          },
        ]
      },
      {
        id: 9,
        text: 'True',
      },
    ],
  },
  {
    id: 4,
    text: 'Functional programming is cool!',
    comments: [
      {
        id: 5,
        text: 'Yep!',
      },
    ],
  },
];

const countComments = (comments) => {
  return comments.reduce(
      (count, comment) => (
          comment.comments
              ? count + 1 + countComments(comment.comments)
              : count + 1
      ),
      0
  );
};

console.log(
    countComments(commentsTree)
); // 8
