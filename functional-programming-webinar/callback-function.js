'use strict';
/*
Функции в JS являются объектами => они могут использоваться как ОБЪЕКТЫ:
1) могут храниться в переменных;
2) создаваться внутри функций;
3) возвращаться как результат функции;
4) передаваться как параметры другим функциям => callback-функции.

Callback-функции (функции обратного вызова) - это функция, которая передаётся другой функции в качестве параметра
и вызывается этой другой, "содержащей", функцией. Важно отметить, что, передавая одну функцию другой в качестве параметра,
мы фактически передаем ее ОПРЕДЕЛЕНИЕ, а не вызываем саму функцию.

Функция, содержащая callback-функцию в качестве параметра, может выполнить обратный вызов в любое время.
Точка, в которой вызывается функция внутри содержащей функции, как раз и называется "обратным вызовом".

Функции обратного вызова являются замыканиями: когда мы передаём функцию в качестве параметра другой функции,
мы можем вызвать её в любой момент внутри содержащей функции,
как если бы функция обратного вызова была определена внутри содержащей функции, поэтому она, как ЗАМЫКАНИЕ,
ИМЕЕТ ДОСТУП К ОБЛАСТИ ВИДИМОСТИ СОДЕРЖАЩЕЙ ФУНКЦИИ (может использовать любые переменные, определенные внутри содержащей функции,
в том числе другие параметры, переданные в содержащую функцию).

*/
// пример callback-функции и замыкания
const fruits = ['Apple', 'Pear', 'Orange', 'Banana'];

const showInConsole = function (name, index) { // эта функция имеет доступ к переменным (а точнее, параметрам) функции, в которой она была вызвана
  console.log(index + 1 + '. ' + name);
};

fruits.forEach(function (eachName, index) { // в качестве параметра передана callBack-функция
  return showInConsole(eachName, index); // которая возвращает другую функцию, а точнее результат её вызова
});
