'use strict';
/*
  Частичное применение функций

  Предоставление функции с меньшим количеством аргументов, чем она ожидает.

  Синтаксис оставшихся параметров функции

  Позволяет представлять неограниченное множество аргументов в виде массива.
  Если последний именованный аргумент функции имеет префикс ..., то он автоматически становится массивом
  с элементами от 0 до theArgs.length в соответствии с актуальным количеством аргументов, переданных в функцию.
  В примере ниже, theArgs будет содержать третий и последующие аргументы функции, т.к. первый будет присвоен a, а второй b.

  function(a, b, ...theArgs) {
    // ...
  }

  Метод bind()

  Создаёт новую функцию, которая при вызове устанавливает в качестве контекста выполнения this предоставленное значение.
  В метод также передаётся набор аргументов, которые будут установлены перед переданными в привязанную функцию аргументами при её вызове.

  fun.bind(thisArg[, arg1[, arg2[, ...]]])

  thisArg - Значение, передаваемое в качестве this в целевую функцию при вызове привязанной функции.
  arg1, arg2, ... - Аргументы целевой функции, передаваемые перед аргументами привязанной функции при вызове целевой функции.

  Метод bind() создаёт новую "привязанную функцию" (ПФ).  ПФ является оберткой над исходным функциональным объектом.
  Вызов ПФ приводит к исполнению кода обернутой функции.

  Метод используется для привязки к функции необходимых объектов и их контекстов, а также аргументов, которые функция будет принимать, причем первыми.
 */

function sum(...args) { // все аргументы, которые придут в нашу функцию, запишутся в переменную args, которая будет являться полноценным массивом
  console.log(args);
  return args.reduce((result, item) => result + item, 0); // функция возвращает сумму всех переданных аргументов
}

// это не вызовет нашу функцию с новыми аргументами, а вернёт новую функцию, в которой эти аргументы будут "зарезервированы"
const partialSum = sum.bind(null, 1, 2, 3);

partialSum(); // [1, 2, 3]
partialSum(4, 5); // [1, 2, 3, 4, 5]
console.log('partialSum with bind: ' + partialSum(4, 5)); // 15

// создадим свою имплементацию метода bind, только без контекста, только с аргументами
// наш partial принимает в качестве аргументов:
// 1) func - функцию, которой нужно добавить аргументы;
// 2) ...partialArgs - неопределенное количество аргументов, которые к функции нужно привязать;
// и возвращает новую функцию, в которую мы сможем передавать ещё какие-то аргументы: => (...args)
// а та, в свою очередь, вызывает функцию func c аргументами ...partialArgs и args
const partial = (func, ...partialArgs) => (...args) => func(...partialArgs.concat(args));

const partialSum2 = partial(sum, 1, 2, 3);

partialSum2(4);
console.log('partialSum2: ' + partialSum(4)); // 10

/*
  Подобное частичное применение аргументов удобно в случае,
  если нужно в колбеке привязать значение, которое сейчас есть,
  но при вызове функции его уже не будет.
 */